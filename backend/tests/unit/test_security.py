"""
–¢–µ—Å—Ç—ã –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
"""

import pytest
from datetime import datetime, timedelta
from unittest.mock import patch

from app.core.security import (
    create_access_token,
    create_refresh_token,
    verify_token,
    verify_password,
    get_password_hash,
    generate_totp_secret,
    verify_totp_code,
    encrypt_sensitive_data,
    decrypt_sensitive_data
)
from app.core.config import settings


class TestPasswordHashing:
    """–¢–µ—Å—Ç—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π."""

    def test_password_hashing(self):
        """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è."""
        password = "test_password_123"
        hashed = get_password_hash(password)
        
        assert hashed != password
        assert verify_password(password, hashed) is True
        assert verify_password("wrong_password", hashed) is False

    def test_different_hashes_for_same_password(self):
        """–¢–µ—Å—Ç —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ö–µ—à–∏ (–∏–∑-–∑–∞ —Å–æ–ª–∏)."""
        password = "test_password_123"
        hash1 = get_password_hash(password)
        hash2 = get_password_hash(password)
        
        assert hash1 != hash2
        assert verify_password(password, hash1) is True
        assert verify_password(password, hash2) is True


class TestJWTTokens:
    """–¢–µ—Å—Ç—ã JWT —Ç–æ–∫–µ–Ω–æ–≤."""

    def test_create_access_token(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è access —Ç–æ–∫–µ–Ω–∞."""
        user_id = 123
        token = create_access_token(user_id)
        
        assert isinstance(token, str)
        assert len(token) > 0

    def test_create_refresh_token(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è refresh —Ç–æ–∫–µ–Ω–∞."""
        user_id = 123
        token = create_refresh_token(user_id)
        
        assert isinstance(token, str)
        assert len(token) > 0

    def test_verify_valid_token(self):
        """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
        user_id = 123
        token = create_access_token(user_id)
        payload = verify_token(token)
        
        assert payload is not None
        assert payload.get("sub") == str(user_id)
        assert payload.get("type") == "access"

    def test_verify_invalid_token(self):
        """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
        invalid_token = "invalid.token.here"
        payload = verify_token(invalid_token)
        
        assert payload is None

    def test_token_expiration(self):
        """–¢–µ—Å—Ç —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞."""
        user_id = 123
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Å—Ä–æ–∫–æ–º –∂–∏–∑–Ω–∏
        with patch.object(settings, 'JWT_ACCESS_TOKEN_EXPIRE_MINUTES', -1):
            token = create_access_token(user_id)
        
        # –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º
        payload = verify_token(token)
        assert payload is None

    def test_token_types(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤."""
        user_id = 123
        
        access_token = create_access_token(user_id)
        refresh_token = create_refresh_token(user_id)
        
        access_payload = verify_token(access_token)
        refresh_payload = verify_token(refresh_token)
        
        assert access_payload.get("type") == "access"
        assert refresh_payload.get("type") == "refresh"


class TestTOTP:
    """–¢–µ—Å—Ç—ã TOTP (Two-Factor Authentication)."""

    def test_generate_totp_secret(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TOTP —Å–µ–∫—Ä–µ—Ç–∞."""
        secret = generate_totp_secret()
        
        assert isinstance(secret, str)
        assert len(secret) == 32  # Base32 encoded secret

    def test_verify_totp_code_with_valid_secret(self):
        """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TOTP –∫–æ–¥–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º."""
        secret = generate_totp_secret()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        import pyotp
        totp = pyotp.TOTP(secret)
        current_code = totp.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        is_valid = verify_totp_code(secret, current_code)
        assert is_valid is True

    def test_verify_totp_code_with_invalid_code(self):
        """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TOTP —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–¥–æ–º."""
        secret = generate_totp_secret()
        invalid_code = "000000"
        
        is_valid = verify_totp_code(secret, invalid_code)
        assert is_valid is False

    def test_verify_totp_code_with_invalid_secret(self):
        """–¢–µ—Å—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TOTP —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º."""
        invalid_secret = "INVALID_SECRET"
        code = "123456"
        
        is_valid = verify_totp_code(invalid_secret, code)
        assert is_valid is False


class TestDataEncryption:
    """–¢–µ—Å—Ç—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""

    def test_encrypt_decrypt_sensitive_data(self):
        """–¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        original_data = "sensitive_information_123"
        
        encrypted = encrypt_sensitive_data(original_data)
        decrypted = decrypt_sensitive_data(encrypted)
        
        assert encrypted != original_data
        assert decrypted == original_data

    def test_encrypt_same_data_gives_different_results(self):
        """–¢–µ—Å—Ç —á—Ç–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        data = "test_data"
        
        encrypted1 = encrypt_sensitive_data(data)
        encrypted2 = encrypt_sensitive_data(data)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –∏–∑-–∑–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ IV
        assert encrypted1 != encrypted2
        
        # –ù–æ –æ–±–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        assert decrypt_sensitive_data(encrypted1) == data
        assert decrypt_sensitive_data(encrypted2) == data

    def test_decrypt_invalid_data(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        invalid_encrypted = "invalid_encrypted_data"
        
        with pytest.raises(Exception):
            decrypt_sensitive_data(invalid_encrypted)

    def test_encrypt_empty_data(self):
        """–¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        empty_data = ""
        
        encrypted = encrypt_sensitive_data(empty_data)
        decrypted = decrypt_sensitive_data(encrypted)
        
        assert decrypted == empty_data

    def test_encrypt_unicode_data(self):
        """–¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è Unicode –¥–∞–Ω–Ω—ã—Ö."""
        unicode_data = "–¢–µ—Å—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏ üîí"
        
        encrypted = encrypt_sensitive_data(unicode_data)
        decrypted = decrypt_sensitive_data(encrypted)
        
        assert decrypted == unicode_data


class TestSecurityHelpers:
    """–¢–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""

    def test_password_strength_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è."""
        # –≠—Ç–∏ —Ç–µ—Å—Ç—ã –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        # validate_password_strength –≤ –º–æ–¥—É–ª–µ security
        pass

    def test_rate_limiting_helpers(self):
        """–¢–µ—Å—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π rate limiting."""
        # –≠—Ç–∏ —Ç–µ—Å—Ç—ã –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏
        # rate limiting –≤ –º–æ–¥—É–ª–µ security
        pass


@pytest.mark.asyncio
class TestAsyncSecurity:
    """–¢–µ—Å—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""

    async def test_async_token_validation(self):
        """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤."""
        # –ï—Å–ª–∏ –±—É–¥—É—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        pass
