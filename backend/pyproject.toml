[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "investment-service-backend"
version = "1.0.0"
description = "Backend API for Investment Portfolio Management Service"
authors = [
    { name = "Investment Service Team", email = "dev@investment-service.ru" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Office/Business :: Financial :: Investment",
]

[project.urls]
Homepage = "https://dohodometr.ru"
Documentation = "https://dohodometr.ru/docs"
Repository = "https://github.com/yourusername/investment-service"
Issues = "https://github.com/yourusername/investment-service/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

# Ruff configuration
[tool.ruff]
target-version = "py312"
line-length = 88
fix = true
show-fixes = true

# Enable rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]

# Ignore specific rules
ignore = [
    "S101",    # Use of assert
    "S104",    # Possible binding to all interfaces
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "TRY003",  # Avoid specifying long messages outside the exception class
    "PLR2004", # Magic value used in comparison
    "S106",    # Possible hardcoded password
    "S107",    # Possible hardcoded password
]

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "__pycache__",
    "build",
    "dist",
    "migrations",
    "venv",
    ".venv",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ARG001", "ARG002"]
"migrations/*" = ["ALL"]
"conftest.py" = ["ARG001"]
"app/api/**" = [
    "B008",  # Depends/File in defaults (FastAPI pattern)
    "C901",  # complex functions allowed in endpoints
    "PLR0912",  # too many branches
    "E501",  # long lines in docstrings/responses
    "RUF001", "RUF002", "RUF003",  # ambiguous unicode in RU texts
    "TRY200", "TRY300", "TRY301", "B904",  # exception chaining preferences
    "RET504", "PLW0127",  # style nits
    "UP007"  # typing union modernisation not required
]
"app/api/health.py" = [
    "S108", "PTH123", "PTH107", "ERA001", "E501", "TRY200", "B904"
]

[tool.ruff.isort]
known-first-party = ["app"]
known-third-party = ["fastapi", "sqlalchemy", "pydantic"]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

# MyPy configuration
[tool.mypy]
python_version = "3.12"
files = ["app/**/*.py"]
show_error_codes = true
show_error_context = true
pretty = true
ignore_missing_imports = false
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false
disallow_incomplete_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--durations=10",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "auth: marks tests related to authentication",
    "portfolio: marks tests related to portfolio management",
    "transactions: marks tests related to transactions",
    "analytics: marks tests related to analytics",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
    "*/conftest.py",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
