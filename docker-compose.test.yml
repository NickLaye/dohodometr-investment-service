# Minimal test compose to support `make ci-test`
name: dohodometr-test

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: investment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d investment_db"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/investment_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=test-secret
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >-
      sh -lc "python -m pip install --upgrade pip && 
      apt-get update && apt-get install -y --no-install-recommends build-essential libpq-dev && 
      pip install -r requirements-dev.txt && 
      pytest -v --cov=app --cov-report=term-missing --cov-report=xml:coverage.xml --maxfail=1"

  frontend:
    image: node:20-alpine
    working_dir: /app
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NODE_ENV=test
    volumes:
      - ./frontend:/app
    command: >-
      sh -lc "npm ci --no-audit --no-fund && npm run test:ci"


