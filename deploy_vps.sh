#!/bin/bash

echo "üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –î–ï–ü–õ–û–ô YOUINVEST –ù–ê VPS"
echo "========================================"
echo ""
echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø–æ–ª–Ω—É—é production –≤–µ—Ä—Å–∏—é YouInvest –Ω–∞ –≤–∞—à VPS —Å–µ—Ä–≤–µ—Ä."
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç root!"
   echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo bash deploy_vps.sh"
   exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º OS
if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$ID
    VER=$VERSION_ID
else
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
    exit 1
fi

echo "‚úÖ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS $VER"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –û–°
case $OS in
    ubuntu)
        if [[ "$VER" < "20.04" ]]; then
            echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Ubuntu 20.04 –∏–ª–∏ –Ω–æ–≤–µ–µ"
            exit 1
        fi
        ;;
    debian)
        if [[ "$VER" < "11" ]]; then
            echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Debian 11 –∏–ª–∏ –Ω–æ–≤–µ–µ"  
            exit 1
        fi
        ;;
    centos|rhel|rocky|almalinux)
        if [[ "$VER" < "8" ]]; then
            echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è CentOS/RHEL 8 –∏–ª–∏ –Ω–æ–≤–µ–µ"
            exit 1
        fi
        ;;
    *)
        echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OS"
        echo "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: Ubuntu 20.04+, Debian 11+, CentOS 8+"
        exit 1
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞..."

# RAM
RAM_GB=$(free -g | awk 'NR==2{printf "%.1f", $2}')
if (( $(echo "$RAM_GB < 3.5" | bc -l) )); then
    echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: RAM = ${RAM_GB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4GB+)"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo "‚úÖ RAM: ${RAM_GB}GB"
fi

# –î–∏—Å–∫
DISK_GB=$(df -h / | awk 'NR==2{printf "%.1f", $4}')
if (( $(echo "$DISK_GB < 25" | bc -l) )); then
    echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –°–≤–æ–±–æ–¥–Ω–æ ${DISK_GB}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 40GB+)"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo "‚úÖ –î–∏—Å–∫: ${DISK_GB}GB —Å–≤–æ–±–æ–¥–Ω–æ"
fi

# CPU
CPU_CORES=$(nproc)
if [[ $CPU_CORES -lt 2 ]]; then
    echo "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: CPU = ${CPU_CORES} —è–¥–µ—Ä (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 2+)"
else
    echo "‚úÖ CPU: ${CPU_CORES} —è–¥–µ—Ä"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
echo ""
echo "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# –î–æ–º–µ–Ω
read -p "üåê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: youinvest.duckdns.org): " DOMAIN
if [[ -z "$DOMAIN" ]]; then
    DOMAIN="youinvest.duckdns.org"
fi
echo "‚úÖ –î–æ–º–µ–Ω: $DOMAIN"

# Email –¥–ª—è SSL
read -p "üìß Email –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: " SSL_EMAIL
if [[ -z "$SSL_EMAIL" ]]; then
    SSL_EMAIL="admin@$DOMAIN"
fi
echo "‚úÖ Email: $SSL_EMAIL"

# –ü–∞—Ä–æ–ª–∏
DB_PASSWORD=$(openssl rand -base64 32 | tr -d '/')
REDIS_PASSWORD=$(openssl rand -base64 16 | tr -d '/')
MINIO_PASSWORD=$(openssl rand -base64 24 | tr -d '/')
JWT_SECRET=$(openssl rand -base64 32 | tr -d '/')

echo "‚úÖ –ü–∞—Ä–æ–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
echo ""
echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."

case $OS in
    ubuntu|debian)
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -y
        apt-get upgrade -y
        apt-get install -y curl wget git ufw fail2ban htop nano bc
        ;;
    centos|rhel|rocky|almalinux)
        yum update -y
        yum install -y curl wget git firewalld fail2ban htop nano bc
        ;;
esac

echo "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
echo ""
echo "üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."

if ! command -v docker &> /dev/null; then
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    
    # Docker Compose
    DOCKER_COMPOSE_VERSION="2.28.1"
    curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    # –ó–∞–ø—É—Å–∫ Docker
    systemctl enable docker
    systemctl start docker
    
    echo "‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    echo "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
echo ""
echo "üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

if ! id "youinvest" &>/dev/null; then
    useradd -m -s /bin/bash youinvest
    usermod -aG docker youinvest
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å youinvest —Å–æ–∑–¥–∞–Ω"
else
    echo "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å youinvest —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall
echo ""
echo "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."

case $OS in
    ubuntu|debian)
        ufw --force enable
        ufw default deny incoming
        ufw default allow outgoing
        ufw allow ssh
        ufw allow 80/tcp
        ufw allow 443/tcp
        echo "‚úÖ UFW –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        ;;
    centos|rhel|rocky|almalinux)
        systemctl enable firewalld
        systemctl start firewalld
        firewall-cmd --permanent --add-service=ssh
        firewall-cmd --permanent --add-service=http  
        firewall-cmd --permanent --add-service=https
        firewall-cmd --reload
        echo "‚úÖ Firewalld –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        ;;
esac

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
echo ""
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."

PROJECT_DIR="/opt/youinvest"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p {data/postgres,data/redis,data/minio,logs,ssl,backups}
chown -R youinvest:youinvest $PROJECT_DIR

echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ docker-compose.prod.yml
echo ""
echo "üê≥ –°–æ–∑–¥–∞–Ω–∏–µ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

cat > docker-compose.prod.yml << EOF
version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: youinvest-postgres
    environment:
      POSTGRES_DB: youinvest_prod
      POSTGRES_USER: youinvest_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./ssl:/ssl:ro
    networks:
      - youinvest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youinvest_user -d youinvest_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: youinvest-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    networks:
      - youinvest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: youinvest-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: youinvest-admin
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - ./data/minio:/data
    networks:
      - youinvest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: youinvest/backend:latest
    container_name: youinvest-backend
    environment:
      ENVIRONMENT: production
      DEBUG: "false"
      APP_NAME: YouInvest
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: youinvest_prod
      DATABASE_USER: youinvest_user
      DATABASE_PASSWORD: ${DB_PASSWORD}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: youinvest-admin
      MINIO_SECRET_KEY: ${MINIO_PASSWORD}
      MINIO_BUCKET_NAME: youinvest-files
      
      # Security
      SECRET_KEY: ${JWT_SECRET}
      JWT_SECRET_KEY: ${JWT_SECRET}
      ENCRYPTION_KEY: ${JWT_SECRET}
      
      # CORS
      CORS_ORIGINS: https://${DOMAIN},https://www.${DOMAIN}
      TRUSTED_HOSTS: ${DOMAIN},www.${DOMAIN}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - youinvest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    image: youinvest/frontend:latest
    container_name: youinvest-frontend
    environment:
      NEXT_PUBLIC_API_URL: https://${DOMAIN}/api
      NEXT_PUBLIC_APP_NAME: YouInvest
      NEXT_PUBLIC_APP_URL: https://${DOMAIN}
      NEXT_PUBLIC_ENVIRONMENT: production
    networks:
      - youinvest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  traefik:
    image: traefik:v3.0
    container_name: youinvest-traefik
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./ssl:/letsencrypt
    networks:
      - youinvest-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(\`traefik.${DOMAIN}\`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"

  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  prometheus:
    image: prom/prometheus:latest
    container_name: youinvest-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - youinvest-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: youinvest-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${MINIO_PASSWORD}
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - youinvest-network
    restart: unless-stopped

networks:
  youinvest-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  grafana_data:
EOF

echo "‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
cat > .env << EOF
# Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YouInvest
ENVIRONMENT=production
DEBUG=false
APP_NAME=YouInvest
DOMAIN=${DOMAIN}

# Database
DATABASE_PASSWORD=${DB_PASSWORD}

# Redis  
REDIS_PASSWORD=${REDIS_PASSWORD}

# MinIO
MINIO_PASSWORD=${MINIO_PASSWORD}

# Security
JWT_SECRET=${JWT_SECRET}

# SSL
SSL_EMAIL=${SSL_EMAIL}
EOF

echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
cat > start.sh << 'EOF'
#!/bin/bash

echo "üöÄ –ó–∞–ø—É—Å–∫ YouInvest Production"
echo "============================="

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    sudo systemctl start docker
    sleep 5
fi

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
docker network ls | grep youinvest-network >/dev/null || docker network create youinvest-network

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
docker-compose -f docker-compose.prod.yml up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
docker-compose -f docker-compose.prod.yml ps

echo ""
echo "üéâ YouInvest –∑–∞–ø—É—â–µ–Ω!"
echo "===================="
echo ""
echo "üåê –°–∞–π—Ç: https://${DOMAIN}"
echo "üìö API:  https://${DOMAIN}/api/docs"
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: https://traefik.${DOMAIN}"
echo ""
echo "–õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f"
EOF

chmod +x start.sh

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
cat > stop.sh << 'EOF'
#!/bin/bash
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ YouInvest..."
docker-compose -f docker-compose.prod.yml down
echo "‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
EOF

chmod +x stop.sh

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞
cat > backup.sh << 'EOF'
#!/bin/bash

BACKUP_DIR="/opt/youinvest/backups"
DATE=$(date +%Y%m%d_%H%M%S)

echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."

# –ë—ç–∫–∞–ø PostgreSQL
docker exec youinvest-postgres pg_dump -U youinvest_user youinvest_prod > "$BACKUP_DIR/db_backup_$DATE.sql"

# –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
tar -czf "$BACKUP_DIR/config_backup_$DATE.tar.gz" docker-compose.prod.yml .env

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
find "$BACKUP_DIR" -name "*.sql" -mtime +7 -delete
find "$BACKUP_DIR" -name "*.tar.gz" -mtime +7 -delete

echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $DATE"
EOF

chmod +x backup.sh

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
cat > /etc/systemd/system/youinvest.service << EOF
[Unit]
Description=YouInvest Service
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/youinvest
ExecStart=/opt/youinvest/start.sh
ExecStop=/opt/youinvest/stop.sh
TimeoutStartSec=0
User=youinvest

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable youinvest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –¥–ª—è –±—ç–∫–∞–ø–æ–≤
(crontab -u youinvest -l 2>/dev/null; echo "0 2 * * * /opt/youinvest/backup.sh") | crontab -u youinvest -

echo "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∏ –±—ç–∫–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
chown -R youinvest:youinvest $PROJECT_DIR
chmod +x $PROJECT_DIR/*.sh

echo ""
echo "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
echo "======================"
echo ""
echo "üìã –ß—Ç–æ –¥–∞–ª—å—à–µ:"
echo ""
echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –¥–ª—è –¥–æ–º–µ–Ω–∞ $DOMAIN –Ω–∞ IP: $(curl -s ifconfig.me)"
echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: sudo systemctl start youinvest"
echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: sudo systemctl status youinvest"
echo ""
echo "üåê –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DNS —Å–∞–π—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:"
echo "   https://$DOMAIN"
echo ""
echo "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:"
echo "   sudo systemctl start youinvest   # –ó–∞–ø—É—Å–∫"
echo "   sudo systemctl stop youinvest    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo "   sudo systemctl restart youinvest # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo ""
echo "üìã –õ–æ–≥–∏:"
echo "   cd /opt/youinvest"
echo "   docker-compose -f docker-compose.prod.yml logs -f"
echo ""
echo "üíæ –ë—ç–∫–∞–ø (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00):"
echo "   /opt/youinvest/backup.sh"
echo ""
echo "‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
