#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.
"""

import asyncio
import time
import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    import psycopg2
    import redis
    import httpx
    from sqlalchemy import create_engine, text
    from app.core.config import Settings
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)


def check_postgres(settings: Settings) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL."""
    try:
        engine = create_engine(settings.database_url_sync)
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version()"))
            version = result.fetchone()[0]
            print(f"‚úÖ PostgreSQL: {version[:50]}...")
            return True
    except Exception as e:
        print(f"‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def check_redis(settings: Settings) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis."""
    try:
        r = redis.from_url(settings.REDIS_URL)
        info = r.info()
        version = info.get('redis_version', 'unknown')
        print(f"‚úÖ Redis: version {version}")
        return True
    except Exception as e:
        print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


async def check_minio(settings: Settings) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MinIO."""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"http://{settings.MINIO_HOST}:{settings.MINIO_PORT}/minio/health/live",
                timeout=5.0
            )
            if response.status_code == 200:
                print("‚úÖ MinIO: –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ùå MinIO: HTTP {response.status_code}")
                return False
    except Exception as e:
        print(f"‚ùå MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def check_environment() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    settings = Settings()
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print(f"  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_HOST}:{settings.DATABASE_PORT}")
    print(f"  - Redis: {settings.REDIS_HOST}:{settings.REDIS_PORT}")
    print(f"  - MinIO: {settings.MINIO_HOST}:{settings.MINIO_PORT}")
    print(f"  - JWT Secret: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.JWT_SECRET_KEY else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"  - Debug —Ä–µ–∂–∏–º: {settings.DEBUG}")
    
    return {
        "settings": settings,
        "jwt_secret_set": bool(settings.JWT_SECRET_KEY),
    }


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    env_check = check_environment()
    settings = env_check["settings"]
    
    if not env_check["jwt_secret_set"]:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω JWT_SECRET_KEY")
        return False
    
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    checks = {
        "PostgreSQL": check_postgres(settings),
        "Redis": check_redis(settings),
        "MinIO": await check_minio(settings),
    }
    
    print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    passed = sum(checks.values())
    total = len(checks)
    
    if passed == total:
        print(f"üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ({passed}/{total})!")
        print("–°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ docker-compose.")
        return False


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
