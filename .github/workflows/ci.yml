name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      run_full_tests:
        description: 'Run full test suites (backend/frontend)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
  schedule:
    - cron: '0 2 * * *' # nightly at 02:00 UTC

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  TZ: 'UTC'

jobs:
  # Backend Tests (SMOKE/QUICK by default)
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Lint & Types (non-blocking)
        run: |
          cd backend
          ruff check . --output-format=github || true
          mypy . || true
      - name: Run smoke tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
        run: |
          cd backend
          pytest -k "smoke or quick" --junitxml=junit.xml --cov=app --cov-report=xml:coverage.xml --cov-report=term-missing || true
      - name: Upload backend artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-artifacts
          path: |
            backend/junit.xml
            backend/coverage.xml
          retention-days: 14

  # Backend FULL tests (on schedule or PR label full-tests or manual input)
  backend-tests-full:
    name: Backend Tests (full)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      github.event_name == 'schedule' ||
      inputs.run_full_tests == 'true' ||
      (github.event_name == 'pull_request' && contains(join(fromJSON(toJSON(github.event.pull_request.labels)).*.name, ','), 'full-tests'))
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run full test suite
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
        run: |
          cd backend
          pytest --junitxml=junit.xml --cov=app --cov-report=xml:coverage.xml --cov-report=term-missing
      - name: Upload backend FULL artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-artifacts-full
          path: |
            backend/junit.xml
            backend/coverage.xml
          retention-days: 14

  # Frontend Tests (fast in PR)
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: ESLint
        run: |
          cd frontend
          npm run lint
      - name: TypeScript check
        run: |
          cd frontend
          npm run type-check
      - name: Unit tests (coverage)
        run: |
          cd frontend
          npm run test:coverage || true
      - name: Upload frontend artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-artifacts
          path: |
            frontend/coverage/lcov.info
          retention-days: 14

  # Frontend FULL tests
  frontend-tests-full:
    name: Frontend Tests (full)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: |
      github.event_name == 'schedule' ||
      inputs.run_full_tests == 'true' ||
      (github.event_name == 'pull_request' && contains(join(fromJSON(toJSON(github.event.pull_request.labels)).*.name, ','), 'full-tests'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Run full unit tests (coverage)
        run: |
          cd frontend
          npm run test:coverage
      - name: Upload frontend FULL artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-artifacts-full
          path: |
            frontend/coverage/lcov.info
          retention-days: 14

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@v0.11.2
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy results to Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      - name: detect-secrets (non-blocking)
        run: |
          pip install detect-secrets
          detect-secrets scan --all-files --exclude-files '\.git/.*' --exclude-files '.*\.lock$' > detect-secrets.json || true
      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-artifacts
          path: |
            trivy-results.sarif
            detect-secrets.json
          retention-days: 14

  # Docker Build Test
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: investment-service-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: investment-service-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Quality Gate (non-failing summary)
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [backend-tests, frontend-tests, security, docker-build]
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Summarize coverage
        run: |
          set -e
          BACKEND_XML=$(ls artifacts/**/coverage.xml 2>/dev/null | head -1 || true)
          FRONTEND_LCOV=$(ls artifacts/**/lcov.info 2>/dev/null | head -1 || true)
          BE=0
          FE=0
          if [ -f "$BACKEND_XML" ]; then
            RATE=$(grep -o 'line-rate="[0-9\.]*"' "$BACKEND_XML" | head -1 | sed -E 's/.*"([0-9\.]+)"/\1/')
            if [ -n "$RATE" ]; then BE=$(python - <<PY
rate = "$RATE"
print(int(round(float(rate)*100)))
PY
); fi
          fi
          if [ -f "$FRONTEND_LCOV" ]; then
            FE=$(awk -F: '/^LF:/{lf+=$2} /^LH:/{lh+=$2} END{ if(lf>0){printf "%d", (lh*100)/lf}else{print 0}}' "$FRONTEND_LCOV")
          fi
          COMBINED=$(( (BE + FE) / 2 ))
          echo "Backend coverage: ${BE}%"
          echo "Frontend coverage: ${FE}%"
          echo "Combined coverage: ${COMBINED}%"
          echo "backend=${BE}" >> $GITHUB_OUTPUT
          echo "frontend=${FE}" >> $GITHUB_OUTPUT
          echo "combined=${COMBINED}" >> $GITHUB_OUTPUT
      - name: Print job results (non-blocking)
        run: |
          echo "Backend: ${{ needs.backend-tests.result }}"
          echo "Frontend: ${{ needs.frontend-tests.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Docker: ${{ needs.docker-build.result }}"
          echo "This job never fails; used for required status check."

  # Quality Gate Strict (optional, can be enabled later)
  quality-gate-strict:
    name: Quality Gate Strict
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-gate]
    if: always()
    env:
      BACKEND_MIN: '35'
      FRONTEND_MIN: '25'
      COMBINED_MIN: '30'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Evaluate thresholds
        run: |
          BACKEND_XML=$(ls artifacts/**/coverage.xml 2>/dev/null | head -1 || true)
          FRONTEND_LCOV=$(ls artifacts/**/lcov.info 2>/dev/null | head -1 || true)
          BE=0
          FE=0
          if [ -f "$BACKEND_XML" ]; then
            RATE=$(grep -o 'line-rate="[0-9\.]*"' "$BACKEND_XML" | head -1 | sed -E 's/.*"([0-9\.]+)"/\1/')
            if [ -n "$RATE" ]; then BE=$(python - <<PY
rate = "$RATE"
print(int(round(float(rate)*100)))
PY
); fi
          fi
          if [ -f "$FRONTEND_LCOV" ]; then
            FE=$(awk -F: '/^LF:/{lf+=$2} /^LH:/{lh+=$2} END{ if(lf>0){printf "%d", (lh*100)/lf}else{print 0}}' "$FRONTEND_LCOV")
          fi
          COMBINED=$(( (BE + FE) / 2 ))
          echo "Backend: ${BE}% (min ${BACKEND_MIN}%)"
          echo "Frontend: ${FE}% (min ${FRONTEND_MIN}%)"
          echo "Combined: ${COMBINED}% (min ${COMBINED_MIN}%)"
          if [ "$BE" -lt "$BACKEND_MIN" ] || [ "$FE" -lt "$FRONTEND_MIN" ] || [ "$COMBINED" -lt "$COMBINED_MIN" ]; then
            echo "❌ Coverage thresholds not met" >&2
            exit 1
          fi
          echo "✅ Coverage thresholds met"

  # Aliases to standardize required statuses (no logic change)
  backend-tests-alias:
    name: Backend Tests (alias)
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: always()
    steps:
      - name: Mirror backend tests status
        run: |
          echo "Upstream: ${{ needs.backend-tests.result }}"
          test "${{ needs.backend-tests.result }}" = "success"

  frontend-tests-alias:
    name: Frontend Tests (alias)
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    if: always()
    steps:
      - name: Mirror frontend tests status
        run: |
          echo "Upstream: ${{ needs.frontend-tests.result }}"
          test "${{ needs.frontend-tests.result }}" = "success"

  security-alias:
    name: Security (alias)
    runs-on: ubuntu-latest
    needs: [security]
    if: always()
    steps:
      - name: Mirror security status
        run: |
          echo "Upstream: ${{ needs.security.result }}"
          test "${{ needs.security.result }}" = "success"

  docker-build-alias:
    name: Docker Build (alias)
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: always()
    steps:
      - name: Mirror docker build status
        run: |
          echo "Upstream: ${{ needs.docker-build.result }}"
          test "${{ needs.docker-build.result }}" = "success"

  quality-gate-alias:
    name: Quality Gate (alias)
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    steps:
      - name: Mirror quality gate status
        run: |
          echo "Upstream: ${{ needs.quality-gate.result }}"
          test "${{ needs.quality-gate.result }}" = "success"
