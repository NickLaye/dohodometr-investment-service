name: üõ°Ô∏è Comprehensive Security Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_penetration_test:
        description: 'Run penetration testing'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

concurrency:
  group: sec-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1

jobs:
  security-preflight:
    name: üîç Security Pre-flight
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
      pull-requests: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@cb7149a9c3c4ab1acc95a652dbc5c2aad4499d8c
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_ENABLE_COMMENTS: false

      - name: Validate Docker Compose files
        run: |
          docker compose -f docker-compose.dev.yml config > /dev/null
          docker compose -f docker-compose.dohodometr.yml config > /dev/null || true
          echo "‚úÖ All Docker Compose files are valid"

      - name: Check security configurations
        run: |
          test -f .secrets.baseline || echo "‚ö†Ô∏è Missing .secrets.baseline"
          test -f .pre-commit-config.yaml || echo "‚ö†Ô∏è Missing pre-commit config"
          test -f .commitlintrc.json || echo "‚ö†Ô∏è Missing commitlint config"
          test -f .yamllint.yml || echo "‚ö†Ô∏è Missing yamllint config"
          echo "‚úÖ Security configuration check completed"

  backend-security:
    name: üêç Backend Security
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: security-preflight
    continue-on-error: true
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Set up Python
        uses: actions/setup-python@5ccb29d8773c3f3f653e1705f474dfaa8a06a912
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Security linting with Bandit
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-security-report.json
          bandit -r app/ -f txt

      - name: Security dependency check with Safety
        run: |
          cd backend
          safety check --json --output safety-report.json --continue-on-error
          safety check

      - name: Advanced dependency audit with pip-audit
        run: |
          cd backend
          pipx install pip-audit || python -m pip install pip-audit
          pip-audit --format=json --output=pip-audit-report.json --progress-spinner=off
          pip-audit

      - name: Code quality with Ruff (security focus)
        run: |
          cd backend
          ruff check . --select=S,B,A,SIM,C4,ICN,PIE,PYI,RSE,RET,SLF,TID,TCH,ARG,PTH,ERA,PGH,PL,TRY,FLY,PERF,FURB,LOG,RUF --output-format=github

      - name: Type checking with MyPy
        run: |
          cd backend
          mypy . --strict --show-error-codes

      - name: Run security-focused tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-security-ci
          JWT_SECRET_KEY: test-jwt-secret-key-for-security-ci
          ENCRYPTION_SALT: test-encryption-salt-for-security-ci
          ENVIRONMENT: testing
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=80 -m "not slow"

      - name: Upload security reports
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        if: always()
        with:
          name: backend-security-reports
          path: |
            backend/bandit-security-report.json
            backend/safety-report.json
            backend/pip-audit-report.json
            backend/coverage.xml
          retention-days: 30

  frontend-security:
    name: ‚öõÔ∏è Frontend Security  
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: security-preflight
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Set up Node.js
        uses: actions/setup-node@8f152de45cc393bb48ce5d89d36b731f54556e65
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Security linting with ESLint
        run: |
          cd frontend
          npm run lint || true

      - name: Type checking
        run: |
          cd frontend
          npm run type-check

      - name: Security audit with npm
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          npm audit --audit-level=moderate || true

      - name: Dependency license check
        run: |
          cd frontend
          npx --yes license-checker --json --out license-report.json || true
          npx --yes license-checker --summary || true

      - name: Build security check
        run: |
          cd frontend
          npm run build
          if grep -r "password\|secret\|key\|token" .next/ --exclude-dir=static --exclude="*.map" | grep -v "placeholder"; then
            echo "‚ö†Ô∏è Potential sensitive data found in build output" && exit 1
          fi

      - name: Run security-focused tests
        run: |
          cd frontend
          npm run test -- --coverage --passWithNoTests

      - name: Upload security reports
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        if: always()
        with:
          name: frontend-security-reports
          path: |
            frontend/npm-audit-report.json
            frontend/license-report.json
          retention-days: 30

  container-security:
    name: üê≥ Container Security
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [backend-security, frontend-security]
    permissions:
      contents: read
      security-events: write
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Build backend image for scanning
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: dohodometr-backend:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image for scanning
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: dohodometr-frontend:security-scan
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54
        with:
          image-ref: 'dohodometr-backend:security-scan'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54
        with:
          image-ref: 'dohodometr-frontend:security-scan'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@49abf0ba24d0b7953cb586944e918a0b92074c80
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'trivy-backend'

      - name: Upload Frontend Trivy results
        uses: github/codeql-action/upload-sarif@49abf0ba24d0b7953cb586944e918a0b92074c80
        if: always()
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'trivy-frontend'

      - name: Run Hadolint on Dockerfiles
        uses: hadolint/hadolint-action@8a0ab2252195d1b77101605b0a23cb45c4677c3c # v3.1.0
        with:
          dockerfile: backend/Dockerfile
          format: sarif
          output-file: backend-hadolint.sarif

      - name: Run Hadolint on Frontend Dockerfile
        uses: hadolint/hadolint-action@8a0ab2252195d1b77101605b0a23cb45c4677c3c # v3.1.0
        with:
          dockerfile: frontend/Dockerfile
          format: sarif
          output-file: frontend-hadolint.sarif

  sbom-generation:
    name: üìã SBOM Generation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: container-security
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Generate SBOM for Backend
        uses: anchore/sbom-action@78fc58e266e87a38d4194b2137a3d4e9bcaf7ca1
        with:
          path: ./backend
          format: cyclone-dx-json
          output-file: backend-sbom.json

      - name: Generate SBOM for Frontend
        uses: anchore/sbom-action@78fc58e266e87a38d4194b2137a3d4e9bcaf7ca1
        with:
          path: ./frontend
          format: cyclone-dx-json
          output-file: frontend-sbom.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        with:
          name: sbom-reports
          path: |
            backend-sbom.json
            frontend-sbom.json
          retention-days: 90

  penetration-testing:
    name: üéØ Penetration Testing
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [container-security]
    if: github.event.inputs.run_penetration_test == 'true' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608

      - name: Set up test environment
        run: |
          cp env.example .env
          docker compose -f docker-compose.dev.yml up -d postgres redis
          sleep 30

      - name: Install penetration testing tools
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap nikto dirb sqlmap

      - name: Run automated penetration tests
        run: |
          chmod +x security/penetration_testing.sh
          ./security/penetration_testing.sh http://localhost:8000
        continue-on-error: true

      - name: Upload penetration test results
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
        if: always()
        with:
          name: penetration-test-results
          path: security/pentest_reports/
          retention-days: 30

  security-summary:
    name: üìä Security Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [backend-security, frontend-security, container-security, sbom-generation]
    if: always()
    continue-on-error: true

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093c4b243e841a2bb15c0 # v4
        with:
          path: security-reports

      - name: Generate Security Summary
        run: |
          echo "# üõ°Ô∏è Security Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Security | ${{ needs.backend-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Code analysis, dependency checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Security | ${{ needs.frontend-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Linting, auditing, build checks |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Image vulnerability scanning |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | ${{ needs.sbom-generation.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} | Software bill of materials |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Review security scan results in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Download detailed reports from workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Address any high/critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with known security issues" >> $GITHUB_STEP_SUMMARY

      - name: Security Gate Check (non-blocking)
        run: |
          BACKEND_STATUS="${{ needs.backend-security.result }}"
          FRONTEND_STATUS="${{ needs.frontend-security.result }}" 
          CONTAINER_STATUS="${{ needs.container-security.result }}"
          echo "Backend Security: $BACKEND_STATUS"
          echo "Frontend Security: $FRONTEND_STATUS" 
          echo "Container Security: $CONTAINER_STATUS"
          echo "‚ö†Ô∏è Gate is informational in PRs; not blocking."
        continue-on-error: true
