name: Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      dummy:
        description: 'Manual trigger placeholder'
        required: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      image-digest: ${{ steps.backend-build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  security-scan:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Normalize backend image ref (first tag or digest)
        id: beimg
        run: |
          # Use first tag from metadata outputs (newline/comma separated) or fallback to backend digest
          TAGS="${{ needs.build-and-push.outputs.backend-image }}"
          FIRST=$(echo "$TAGS" | tr ', ' '\n' | head -n 1)
          if [ -z "$FIRST" ]; then FIRST=${{ needs.build-and-push.outputs.image-digest }}; fi
          echo "ref=$FIRST" >> "$GITHUB_OUTPUT"

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.beimg.outputs.ref }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Normalize frontend image ref (first tag or digest)
        id: feimg
        run: |
          TAGS="${{ needs.build-and-push.outputs.frontend-image }}"
          FIRST=$(echo "$TAGS" | tr ', ' '\n' | head -n 1)
          if [ -z "$FIRST" ]; then FIRST=${{ needs.build-and-push.outputs.image-digest }}; fi
          echo "ref=$FIRST" >> "$GITHUB_OUTPUT"

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.feimg.outputs.ref }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://dohodometr.ru
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /opt/dohodometr
            
            # Pull new images
            docker pull ${{ needs.build-and-push.outputs.backend-image }}
            docker pull ${{ needs.build-and-push.outputs.frontend-image }}
            
            # Update docker-compose with new tags
            export BACKEND_IMAGE=${{ needs.build-and-push.outputs.backend-image }}
            export FRONTEND_IMAGE=${{ needs.build-and-push.outputs.frontend-image }}
            
            # Backup database before deployment
            docker compose -f docker-compose.production.yml exec -T postgres pg_dump -U postgres dohodometr | gzip > "backup_$(date +%Y%m%d_%H%M%S).sql.gz" || echo "Database backup failed, continuing..."
            
            # Deploy new version with zero-downtime
            docker compose -f docker-compose.production.yml up -d --no-deps backend frontend
            
            # Wait for health checks
            sleep 30
            
            # Verify deployment
            curl -f http://localhost:8000/health || exit 1
            
            # Clean up old images
            docker image prune -f
            
            echo "Deployment completed successfully!"

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Production deployment ${{ job.status }}!
            Backend: ${{ needs.build-and-push.outputs.backend-image }}
            Frontend: ${{ needs.build-and-push.outputs.frontend-image }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  create-release:
  docker-build:
    name: Docker Build (alias)
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    steps:
      - name: Mirror upstream docker build status
        run: |
          echo "Upstream: ${{ needs.build-and-push.result }}"
          test "${{ needs.build-and-push.result }}" = "success"

  security:
    name: Security (alias)
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: always()
    steps:
      - name: Mirror upstream security scan status
        run: |
          echo "Upstream: ${{ needs.security-scan.result }}"
          test "${{ needs.security-scan.result }}" = "success"

  quality-gate:
    name: Quality Gate (alias)
    runs-on: ubuntu-latest
    needs: [docker-build, security]
    if: always()
    steps:
      - name: Check required job results
        run: |
          echo "Docker Build: ${{ needs.docker-build.result }}"
          echo "Security: ${{ needs.security.result }}"
          if [[ "${{ needs.docker-build.result }}" != "success" || "${{ needs.security.result }}" != "success" ]]; then
            echo "❌ Quality gate failed"
            exit 1
          fi
          echo "✅ Quality gate passed"
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes in this Release
            - Automatic deployment from commit ${{ github.sha }}
            - Backend image: ${{ needs.build-and-push.outputs.backend-image }}
            - Frontend image: ${{ needs.build-and-push.outputs.frontend-image }}
          draft: false
          prerelease: false
