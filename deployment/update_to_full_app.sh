#!/bin/bash

# ========================================================
# üöÄ DOHODOMETR.RU - –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–û –ü–û–õ–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ========================================================
# –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞
# –ê–≤—Ç–æ—Ä: Dohodometr Team
# –î–∞—Ç–∞: 13 –∞–≤–≥—É—Å—Ç–∞ 2025

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}========================================================${NC}"
echo -e "${BLUE}üöÄ DOHODOMETR.RU - –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–û –ü–û–õ–ù–û–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø${NC}"
echo -e "${BLUE}========================================================${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root${NC}"
   exit 1
fi

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
DEPLOY_DIR="/opt/dohodometr"
COMPOSE_FILE="docker-compose.production.yml"
ENV_FILE=".env"

echo -e "${YELLOW}üìç –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $DEPLOY_DIR${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -d "$DEPLOY_DIR" ]; then
    echo -e "${RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $DEPLOY_DIR –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    echo -e "${YELLOW}üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–µ–ø–ª–æ–π —Å–∫—Ä–∏–ø—Ç${NC}"
    exit 1
fi

cd "$DEPLOY_DIR"

echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–µ–ø–ª–æ—è${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
echo -e "${YELLOW}üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
BACKUP_DIR="backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp docker-compose.production.yml "$BACKUP_DIR/" 2>/dev/null || echo "‚ö†Ô∏è  docker-compose.production.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
cp .env "$BACKUP_DIR/" 2>/dev/null || echo "‚ö†Ô∏è  .env –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo -e "${GREEN}‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ $BACKUP_DIR${NC}"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã...${NC}"
docker-compose -f docker-compose.production.yml down || echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose —Ñ–∞–π–ª–∞
echo -e "${YELLOW}üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker Compose...${NC}"
# –§–∞–π–ª —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º
cat > docker-compose.production.yml << 'EOF'
version: '3.8'

services:
  # Traefik Reverse Proxy —Å Let's Encrypt
  traefik:
    image: traefik:v3.0
    container_name: dohodometr-traefik
    restart: unless-stopped
    command:
      # API –∏ Dashboard
      - --api.dashboard=true
      - --api.insecure=false
      
      # –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=dohodometr-network
      
      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # Let's Encrypt –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=admin@dohodometr.ru
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      
      # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      - --log.level=INFO
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      
      # –ú–µ—Ç—Ä–∏–∫–∏
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
    
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./logs/traefik:/var/log/traefik
    
    networks:
      - dohodometr-network
    
    labels:
      - "traefik.enable=true"
      
      # HTTP -> HTTPS –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp(\`{host:.+}\`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      
      # Traefik Dashboard (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π)
      - "traefik.http.routers.traefik-dashboard.rule=Host(\`traefik.dohodometr.ru\`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      
      # –ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è Traefik Dashboard
      # –ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–°–ú–ï–ù–ò–¢–ï –ü–ê–†–û–õ–¨!)
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$2y$$10$$X8/8Z5FxJ6v2E8K4vP9zLOQ8xF7h9D6gC5b1A3e2B9f8G7h6I5j4K3l2"
      
      # Security Headers
      - "traefik.http.middlewares.secure-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Referrer-Policy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=31536000; includeSubDomains; preload"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Content-Security-Policy=default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'"

  # Backend API
  backend:
    image: dohodometr-backend:latest
    container_name: dohodometr-backend
    restart: unless-stopped
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-dohodometr}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change_this_jwt_secret_key_in_production}
      - ENVIRONMENT=production
      - DEBUG=false
      - CORS_ORIGINS=https://dohodometr.ru,https://www.dohodometr.ru
      - TRUSTED_HOSTS=dohodometr.ru,www.dohodometr.ru
    volumes:
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs
    networks:
      - dohodometr-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      
      # API Routes
      - "traefik.http.routers.dohodometr-api.rule=Host(\`dohodometr.ru\`,\`www.dohodometr.ru\`) && PathPrefix(\`/api\`)"
      - "traefik.http.routers.dohodometr-api.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dohodometr-api.middlewares=secure-headers"
      - "traefik.http.services.dohodometr-api.loadbalancer.server.port=8000"
      
      # Health Check
      - "traefik.http.routers.dohodometr-health.rule=Host(\`dohodometr.ru\`,\`www.dohodometr.ru\`) && Path(\`/health\`)"
      - "traefik.http.routers.dohodometr-health.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-health.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    image: dohodometr-frontend:latest
    container_name: dohodometr-frontend
    restart: unless-stopped
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=https://dohodometr.ru/api
      - NEXT_PUBLIC_APP_NAME=Dohodometr
      - NEXT_PUBLIC_APP_URL=https://dohodometr.ru
      - NEXT_PUBLIC_ENVIRONMENT=production
    networks:
      - dohodometr-network
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      
      # Main Website  
      - "traefik.http.routers.dohodometr-web.rule=Host(\`dohodometr.ru\`)"
      - "traefik.http.routers.dohodometr-web.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dohodometr-web.middlewares=secure-headers,www-redirect"
      - "traefik.http.services.dohodometr-web.loadbalancer.server.port=3000"
      
      # WWW —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
      - "traefik.http.routers.dohodometr-www.rule=Host(\`www.dohodometr.ru\`)"
      - "traefik.http.routers.dohodometr-www.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-www.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dohodometr-www.middlewares=www-redirect"
      
      # WWW to non-WWW redirect middleware
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www\\.dohodometr\\.ru/(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://dohodometr.ru/$\${1}"
      - "traefik.http.middlewares.www-redirect.redirectregex.permanent=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: dohodometr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dohodometr}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - dohodometr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: dohodometr-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - dohodometr-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ uptime
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: dohodometr-uptime
    restart: unless-stopped
    volumes:
      - uptime_data:/app/data
    networks:
      - dohodometr-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(\`uptime.dohodometr.ru\`)"
      - "traefik.http.routers.uptime.entrypoints=websecure"
      - "traefik.http.routers.uptime.tls.certresolver=letsencrypt"
      - "traefik.http.routers.uptime.middlewares=uptime-auth"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"
      
      # –ë–∞–∑–æ–≤–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      - "traefik.http.middlewares.uptime-auth.basicauth.users=admin:$$2y$$10$$X8/8Z5FxJ6v2E8K4vP9zLOQ8xF7h9D6gC5b1A3e2B9f8G7h6I5j4K3l2"

networks:
  dohodometr-network:
    driver: bridge
    name: dohodometr-network

volumes:
  postgres_data:
    name: dohodometr-postgres-data
  redis_data:
    name: dohodometr-redis-data
  uptime_data:
    name: dohodometr-uptime-data
EOF

echo -e "${GREEN}‚úÖ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞${NC}"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo -e "${YELLOW}üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π${NC}"
    cat > .env << 'EOF'
# DOHODOMETR.RU PRODUCTION ENVIRONMENT
POSTGRES_DB=dohodometr
POSTGRES_USER=postgres
POSTGRES_PASSWORD=DO_change_strong_password_2025_production
REDIS_PASSWORD=DO_change_redis_password_2025_secure
SECRET_KEY=DO_change_secret_key_production_2025_very_secure
JWT_SECRET_KEY=DO_change_jwt_secret_key_production_2025_secure
ENVIRONMENT=production
DEBUG=false
EOF
else
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    if ! grep -q "SECRET_KEY=" .env; then
        echo "SECRET_KEY=DO_change_secret_key_production_2025_very_secure" >> .env
    fi
    if ! grep -q "JWT_SECRET_KEY=" .env; then
        echo "JWT_SECRET_KEY=DO_change_jwt_secret_key_production_2025_secure" >> .env
    fi
    if ! grep -q "DEBUG=" .env; then
        echo "DEBUG=false" >> .env
    fi
fi

echo -e "${GREEN}‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã${NC}"

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "${YELLOW}üìÅ –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...${NC}"
mkdir -p uploads logs/backend logs/traefik backups

echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞...${NC}"
if [ ! -d "../backend" ] || [ ! -d "../frontend" ]; then
    echo -e "${RED}‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ../backend –∏ ../frontend${NC}"
    echo -e "${YELLOW}üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä${NC}"
    echo -e "${YELLOW}   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:${NC}"
    echo -e "${YELLOW}   /opt/dohodometr/backend/    <- –ö–æ–¥ –±—ç–∫–µ–Ω–¥–∞${NC}"
    echo -e "${YELLOW}   /opt/dohodometr/frontend/   <- –ö–æ–¥ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞${NC}"
    echo -e "${YELLOW}   /opt/dohodometr/deployment/ <- –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç${NC}"
    echo ""
    echo -e "${BLUE}üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:${NC}"
    echo -e "${BLUE}1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:${NC}"
    echo -e "${BLUE}   scp -r backend/ frontend/ root@$(hostname -I | awk '{print $1}'):/opt/dohodometr/${NC}"
    echo -e "${BLUE}2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–∞–π–¥–µ–Ω${NC}"

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
echo -e "${YELLOW}üî® –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...${NC}"
echo -e "${YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...${NC}"

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
docker-compose -f docker-compose.production.yml build --no-cache

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
docker-compose -f docker-compose.production.yml up -d

echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ${NC}"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫—É–Ω–¥)...${NC}"
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤...${NC}"
docker-compose -f docker-compose.production.yml ps

echo ""
echo -e "${GREEN}========================================================${NC}"
echo -e "${GREEN}üéâ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!${NC}"
echo -e "${GREEN}========================================================${NC}"
echo ""
echo -e "${GREEN}‚úÖ –ü–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ${NC}"
echo -e "${GREEN}‚úÖ Frontend: React/Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ${NC}"
echo -e "${GREEN}‚úÖ Backend: FastAPI —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º${NC}"
echo -e "${GREEN}‚úÖ Database: PostgreSQL${NC}"
echo -e "${GREEN}‚úÖ Cache: Redis${NC}"
echo ""
echo -e "${BLUE}üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:${NC}"
echo -e "${BLUE}   –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: https://dohodometr.ru${NC}"
echo -e "${BLUE}   API: https://dohodometr.ru/api/v1/${NC}"
echo -e "${BLUE}   Health: https://dohodometr.ru/health${NC}"
echo -e "${BLUE}   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: https://uptime.dohodometr.ru${NC}"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ .env —Ñ–∞–π–ª–µ!${NC}"
echo -e "${YELLOW}   –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ —Å 'DO_change' –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏${NC}"
echo ""
echo -e "${BLUE}üìã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:${NC}"
echo -e "${BLUE}   curl -s https://dohodometr.ru/health | jq${NC}"
echo -e "${BLUE}   curl -s https://dohodometr.ru/api/v1/ | jq${NC}"

# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo ""
echo -e "${GREEN}üîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:${NC}"
echo -e "${GREEN}1. –°–º–µ–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–æ–ª–∏ –≤ .env —Ñ–∞–π–ª–µ${NC}"
echo -e "${GREEN}2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥${NC}"
echo -e "${GREEN}3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã${NC}"
echo -e "${GREEN}4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π${NC}"
echo ""
echo -e "${GREEN}üéØ –ì–æ—Ç–æ–≤–æ! Dohodometr.ru —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!${NC}"
