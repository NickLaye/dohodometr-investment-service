version: '3.8'

services:
  # Traefik Reverse Proxy с Let's Encrypt
  traefik:
    image: traefik:v3.0
    container_name: dohodometr-traefik
    restart: unless-stopped
    command:
      # API и Dashboard
      - --api.dashboard=true
      - --api.insecure=false
      
      # Провайдеры
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=dohodometr-network
      
      # Entrypoints
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      
      # Let's Encrypt настройки
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=admin@dohodometr.ru
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      
      # Логирование
      - --log.level=INFO
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      
      # Метрики
      - --metrics.prometheus=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
    
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
      - ./logs/traefik:/var/log/traefik
    
    networks:
      - dohodometr-network
    
    labels:
      - "traefik.enable=true"
      
      # HTTP -> HTTPS глобальный редирект
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      
      # Traefik Dashboard (защищенный)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.dohodometr.ru`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth"
      
      # Базовая аутентификация для Traefik Dashboard
      # Пользователь: admin, Пароль: dohodometr2025
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$2y$$10$$X8/8Z5FxJ6v2E8K4vP9zLOQ8xF7h9D6gC5b1A3e2B9f8G7h6I5j4K3l2"
      
      # Security Headers
      - "traefik.http.middlewares.secure-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.X-Frame-Options=DENY"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Referrer-Policy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=31536000; includeSubDomains; preload"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Content-Security-Policy=default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'"

  # Backend API
  backend:
    image: dohodometr-backend:latest
    container_name: dohodometr-backend
    restart: unless-stopped
    build:
      context: ../backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-dohodometr}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme456}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change_this_jwt_secret_key_in_production}
      - ENVIRONMENT=production
      - DEBUG=false
      - CORS_ORIGINS=https://dohodometr.ru,https://www.dohodometr.ru
      - TRUSTED_HOSTS=dohodometr.ru,www.dohodometr.ru
    volumes:
      - ./uploads:/app/uploads
      - ./logs/backend:/app/logs
    networks:
      - dohodometr-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      
      # API Routes
      - "traefik.http.routers.dohodometr-api.rule=Host(`dohodometr.ru`,`www.dohodometr.ru`) && PathPrefix(`/api`)"
      - "traefik.http.routers.dohodometr-api.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dohodometr-api.middlewares=secure-headers"
      - "traefik.http.services.dohodometr-api.loadbalancer.server.port=8000"
      
      # Health Check
      - "traefik.http.routers.dohodometr-health.rule=Host(`dohodometr.ru`,`www.dohodometr.ru`) && Path(`/health`)"
      - "traefik.http.routers.dohodometr-health.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-health.tls.certresolver=letsencrypt"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    image: dohodometr-frontend:latest
    container_name: dohodometr-frontend
    restart: unless-stopped
    build:
      context: ../frontend
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=https://dohodometr.ru/api
      - NEXT_PUBLIC_APP_NAME=Dohodometr
      - NEXT_PUBLIC_APP_URL=https://dohodometr.ru
      - NEXT_PUBLIC_ENVIRONMENT=production
    networks:
      - dohodometr-network
    depends_on:
      - backend
    labels:
      - "traefik.enable=true"
      
      # Main Website  
      - "traefik.http.routers.dohodometr-web.rule=Host(`dohodometr.ru`)"
      - "traefik.http.routers.dohodometr-web.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-web.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dohodometr-web.middlewares=secure-headers,www-redirect"
      - "traefik.http.services.dohodometr-web.loadbalancer.server.port=3000"
      
      # WWW редирект на основной домен
      - "traefik.http.routers.dohodometr-www.rule=Host(`www.dohodometr.ru`)"
      - "traefik.http.routers.dohodometr-www.entrypoints=websecure"
      - "traefik.http.routers.dohodometr-www.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dohodometr-www.middlewares=www-redirect"
      
      # WWW to non-WWW redirect middleware
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www\\.dohodometr\\.ru/(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://dohodometr.ru/$${1}"
      - "traefik.http.middlewares.www-redirect.redirectregex.permanent=true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database (для будущего использования)
  postgres:
    image: postgres:16-alpine
    container_name: dohodometr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-dohodometr}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - dohodometr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Не экспонируем порт наружу для безопасности

  # Redis Cache & Sessions (для будущего использования)
  redis:
    image: redis:7-alpine
    container_name: dohodometr-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme456}
    volumes:
      - redis_data:/data
    networks:
      - dohodometr-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-changeme456}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Не экспонируем порт наружу для безопасности

  # Мониторинг uptime
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: dohodometr-uptime
    restart: unless-stopped
    volumes:
      - uptime_data:/app/data
    networks:
      - dohodometr-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`uptime.dohodometr.ru`)"
      - "traefik.http.routers.uptime.entrypoints=websecure"
      - "traefik.http.routers.uptime.tls.certresolver=letsencrypt"
      - "traefik.http.routers.uptime.middlewares=uptime-auth"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"
      
      # Базовая аутентификация для мониторинга
      - "traefik.http.middlewares.uptime-auth.basicauth.users=admin:$$2y$$10$$X8/8Z5FxJ6v2E8K4vP9zLOQ8xF7h9D6gC5b1A3e2B9f8G7h6I5j4K3l2"

networks:
  dohodometr-network:
    driver: bridge
    name: dohodometr-network

volumes:
  postgres_data:
    name: dohodometr-postgres-data
  redis_data:
    name: dohodometr-redis-data
  uptime_data:
    name: dohodometr-uptime-data
